#!/usr/bin/env python3

'''
Generate wireguard config files.

See: https://www.wireguardconfig.com

'''

import ipaddress
import pathlib
import subprocess
import toml
import io

CONFIG = toml.load(pathlib.Path(__file__).parent / 'config.toml')
LAN = CONFIG['LAN']
SITE = CONFIG['site']
CLIENT = CONFIG['client']
NW = ipaddress.IPv4Network(LAN['NETWORK'])

# 2600:1f13:07ad:fd01:3daa:0087:0012:0001
#  /16  /32  /48  /64  /80  /96 /112 /128


# TODO: use ipaddress stdlib


def get_pubkey(config):
  if pubkey := config.get('PublicKey'):
    return pubkey
  if privkey := config.get('PrivateKey'):
    return subprocess.check_output(['wg', 'pubkey'], input=privkey, encoding='ascii').strip()
  raise ValueError('no keys')


def get_addr(octet):
  return f'{LAN["PREFIX"]}{octet}'


def get_addr6(octet):
  return f'{LAN["PREFIX6"]}{octet:04d}:0001'


def get_site(host):
  conf = dict(CONFIG['site_defaults']) | SITE[host]
  sn = ipaddress.IPv4Network((
    int(NW.network_address) | (conf['site'] << 8),
    conf['mask']))

  gw = ipaddress.IPv4Interface((int(sn.network_address) | 1, conf['mask']))

  ips = [sn]
  ips += [ipaddress.IPv4Network(a) for a in conf['allowed']]

  conf |= dict(
    sn = sn,
    gw = gw,
    ips = ips,
    PublicKey = get_pubkey(conf),
  )
  return conf


def get_config_for_site(host):
  conf = get_site(host)
  wg_conf = [(f'[Interface] # {host}', interface := {})]
  interface |= dict(
    PrivateKey = conf['PrivateKey'],
    ListenPort = conf['ListenPort'],
  )
  sn = ipaddress.IPv4Network(int(NW.network_address) | (conf['site'] << 8))

  for name in SITE.keys():
    if name == host: continue
    site = get_site(name)
    wg_conf.append((f'[Peer] # {name}', wg_peer := {}))
    wg_peer |= dict(
      PublicKey = site['PublicKey'],
      AllowedIPs = ', '.join(map(str, site['ips'])),
      PersistentKeepalive = site['PersistentKeepalive'],
      Endpoint = f'{name}:{site["ListenPort"]}'
    )

  for name, client_ in CLIENT.items():
    client = dict(CONFIG['client_defaults'])
    client |= client_
    wg_conf.append((f'[Peer] # {name}', wg_peer := {}))
    ips = ipaddress.IPv4Network(int(sn.network_address) | client['Address'])
    wg_peer |= dict(
      PublicKey = get_pubkey(client),
      AllowedIPs = ips,
      PersistentKeepalive = 5, # TODO load from some config
    )

  return wg_conf


def get_config_for_client(host, gw=None):
  conf = dict(CONFIG['client_defaults']) | CLIENT[host]
  wg_conf = [(f'[Interface] # {host}', interface := {})]
  pk = conf.get('PrivateKey')
  if pk:
    interface |= dict(PrivateKey=pk)

  if (lp := conf.get('ListenPort')):
    interface |= dict(ListenPort=lp)

  interface['DNS'] = ', '.join(LAN['DNS'])

  if not gw:
    gw = conf['gateway']
  site = get_site(gw)

  ip = ipaddress.IPv4Interface((
    int(site['sn'].network_address) | conf['Address'],
    LAN['mask']))
  interface['Address'] = ip

  wg_conf.append((f'[Peer] # {gw}', wg_peer := {}))
  wg_peer |= dict(
    PublicKey = site['PublicKey'],
    # AllowedIPs = ', '.join(map(str, site['ips'])),
    AllowedIPs = ipaddress.IPv4Network((0, 0)),
    PersistentKeepalive = site['PersistentKeepalive'],
    Endpoint = f'{gw}:{site["ListenPort"]}'
  )

  return wg_conf


def get_script_for_site(host):
  conf = get_site(host)

  sn = conf['sn']
  gw = conf['gw']

  wan = conf.get("wan_interface")


# VPC -> Route Tables
# Change the ipv6 subnet from "local" to the server instance
#
# EC2 -> Network interfaces -> Manage prefixes
# IPv6 prefix delegation: Auto-assign


# 06:53:07.032805 IP6 2604:a880:400:d0::1c4d:e001 > 2600:1f13:7ad:fd01:3daa:87:0:9: ICMP6, echo request, id 22867, seq 1, length 64
# 06:53:07.360278 IP6 zkpq.ca > ff02::1:ff00:9: ICMP6, neighbor solicitation, who has 2600:1f13:7ad:fd01:3daa:87:0:9, length 32
# 06:53:07.360326 IP6 2600:1f13:7ad:fd01:3daa:87:0:9 > zkpq.ca: ICMP6, neighbor advertisement, tgt is 2600:1f13:7ad:fd01:3daa:87:0:9, length 32

  script = f'''#!/bin/bash

# autogenerated up script for {host}

set -e
set -u
set -o pipefail
set -x


# clean up everything
ip link set down dev wg0 || true
ip link del dev wg0 || true
iptables -D FORWARD -i wg0 -j ACCEPT || true
iptables -D POSTROUTING -o '{wan}' -j MASQUERADE -t nat || true

if [ $# -eq 1 ] && [ "$1" = "stop" ];
then
  exit
fi

# done cleanup


# set up interface
ip link add dev wg0 type wireguard
wg setconf wg0 /etc/wireguard/wg0.conf
ip address add dev wg0 '{gw}'
# ip address add dev wg0 <<addr6>>
ip link set up dev wg0
'''

  for name in SITE.keys():
    if name == host: continue
    site = get_site(name)
    for ip in site['ips']:
      script += f'''
# route to {name}
ip route add '{ip}' dev wg0 via '{gw.ip}' '''

  script += f'''

echo 1 | tee /proc/sys/net/ipv4/conf/{wan}/proxy_arp

sysctl -w net.ipv4.ip_forward=1
iptables -A FORWARD -i wg0 -j ACCEPT
iptables -A POSTROUTING -o '{wan}' -j MASQUERADE -t nat

# sysctl -w net.ipv6.conf.all.forwarding=1
'''
  return script

def print_config(config):
  b = io.StringIO()
  for heading, section in config:
    print(heading, file=b)
    for key, value in section.items():
      print(f'{key:<20} = {value}', file=b)
    print('', file=b)
  import qrcode
  qr = qrcode.QRCode()
  qr.add_data(b.getvalue())
  q = io.StringIO()
  qr.print_ascii(out=q)

  # for line in q.getvalue().splitlines():
  #   print(f'# {line}', file=b)
  print(b.getvalue())



def main(args):
  if args.list_clients:
    print('\n'.join(SITE.keys() | CLIENT.keys()))
    return
  elif args.type == 'conf':
    h = args.host
    if h in SITE:
      config = get_config_for_site(h)
    elif h in CLIENT:
      config = get_config_for_client(h)
    else:
      raise ValueError(f'no host {h}')
    print_config(config)
    return
  elif args.type == 'script':
    script = get_script_for_site(args.host)
    print(script)
    return
  raise ValueError(f'unknown type {args.type}')


if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(argparse.RawTextHelpFormatter, description=__doc__)
  parser.add_argument('--list-clients', action='store_true')
  parser.add_argument('host', nargs='?')
  parser.add_argument('--type', default='conf')
  main(parser.parse_args())
